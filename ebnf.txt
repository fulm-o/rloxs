Program         ::= Declaration* EOF ;

Declaration     ::= VarDecl | FunDecl | Statement ;

VarDecl         ::= "let" IDENTIFIER ( "=" Expression )? ";" ;
FunDecl         ::= "fn" IDENTIFIER "(" Parameters? ")" Block ;

Parameters      ::= IDENTIFIER ( "," IDENTIFIER )* ;

Statement       ::= ExprStmt | PrintStmt | Block | IfStmt | WhileStmt | ForStmt | ReturnStmt ;

ExprStmt        ::= Expression ";" ;
PrintStmt       ::= "print" Expression ";" ;
Block           ::= "{" Declaration* "}" ;
IfStmt          ::= "if" Expression Block ( "else" Block )? ;
WhileStmt       ::= "while" Expression Block ;
ForStmt         ::= "for" "(" ( VarDecl | ExprStmt | ";" ) Expression? ";" Expression? ")" Block ;
ReturnStmt      ::= "return" Expression? ";" ;

Expression      ::= Assignment ;
Assignment      ::= ( IDENTIFIER "=" )? LogicOr ;
LogicOr         ::= LogicAnd ( "or" LogicAnd )* ;
LogicAnd        ::= Equality ( "and" Equality )* ;
Equality        ::= Comparison ( ( "!=" | "==" ) Comparison )* ;
Comparison      ::= Term ( ( ">" | ">=" | "<" | "<=" ) Term )* ;
Term            ::= Factor ( ( "-" | "+" ) Factor )* ;
Factor          ::= Unary ( ( "/" | "*" ) Unary )* ;
Unary           ::= ( "!" | "-" ) Unary | Primary ;
Primary         ::= "true" | "false" | "nil" | NUMBER | STRING | IDENTIFIER | "(" Expression ")" ;

NUMBER          ::= [0-9]+ ("." [0-9]+)? ;
STRING          ::= "\"" .*? "\"" ;
IDENTIFIER      ::= [a-zA-Z_][a-zA-Z0-9_]* ;
EOF             ::= ;
